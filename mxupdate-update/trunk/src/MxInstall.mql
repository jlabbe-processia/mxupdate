##############################################################################
#
# Copyright 2008-2009 The MxUpdate Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Revision:        $Rev$
# Last Changed:    $Date$
# Last Changed By: $Author$
#
##############################################################################

tcl;

eval  {

  set VERSION "0-2-2"

  set ENV_NAME_MXUPDATE_PATH      "MXUPDATE_PATH"
  set ENV_NAME_MAPPING_EXTENSION  "MXUPDATE_MAPPING_FILE"

  # get the installation directory
  # is the installation directory defined as local MX environment variable?
  if {[mql exists env "${ENV_NAME_MXUPDATE_PATH}"] > 0} {
    set sPath [mql get env "${ENV_NAME_MXUPDATE_PATH}"]
  # maybe as global environment variable?
  } elseif {[mql exists env global "${ENV_NAME_MXUPDATE_PATH}"] > 0} {
    set sPath [mql get env global "${ENV_NAME_MXUPDATE_PATH}"]
  # or as shell enviroment variable?
  } elseif {[info exists env(${ENV_NAME_MXUPDATE_PATH})] > 0}  {
    set sPath $env(${ENV_NAME_MXUPDATE_PATH})
  # otherwise error!!!!
  } else  {
    error "\nRequired enviroment variable '${ENV_NAME_MXUPDATE_PATH}' is not defined!"
  }

  # get mapping file extension (if defined)
  # is the mapping file extension defined as local MX environment variable?
  if {[mql exists env "${ENV_NAME_MAPPING_EXTENSION}"] > 0} {
    set sMappingFile [mql get env "${ENV_NAME_MAPPING_EXTENSION}"]
  # maybe as global environment variable?
  } elseif {[mql exists env global "${ENV_NAME_MAPPING_EXTENSION}"] > 0} {
    set sMappingFile [mql get env global "${ENV_NAME_MAPPING_EXTENSION}"]
  # or as shell enviroment variable?
  } elseif {[info exists env(${ENV_NAME_MAPPING_EXTENSION})] > 0}  {
    set sMappingFile $env(${ENV_NAME_MAPPING_EXTENSION})
  } else  {
    set sMappingFile ""
  }

  ##############################################################################
  # Read the mapping configuration between MX names and internal used names
  ##############################################################################
  proc pReadMapping {_sRoot}  {
    global asMapping
    global sMappingFile

    # read original file
    set pFile [open [file join "${_sRoot}" "org" "mxupdate" "mapping.properties"] r]
    set lsMapping [split [read $pFile] "\n"]
    close $pFile

    # read extension file (if defined)
    if {"${sMappingFile}" != ""}  {
      set pFile [open [file join "${sMappingFile}"] r]
      set lsMapping [concat $lsMapping [split [read $pFile] "\n"]]
      close $pFile
    }

    # prepare mapping
    foreach sOneLine ${lsMapping}  {
      set sOneLine [string trim "${sOneLine}"]
      # check for none empty line and none comment line 
      if {([string length "${sOneLine}"] > 0) && ([string index "${sOneLine}" 0] != "#")}  {
        # equal index position
        set iIdx [string first "=" "${sOneLine}"]
        if {${iIdx} > 0}  {
          # extract key and value
          set sKey [string trim [string range "${sOneLine}" 0 [expr ${iIdx} - 1]]]
          set sVal [string trim [string range "${sOneLine}" [expr ${iIdx} + 1] end]]
          set asMapping(${sKey}) "${sVal}"
        }
      }
    }
  }

  ##############################################################################
  # Register symbolic name for given administration object.
  ##############################################################################
  proc pRegisterObject {_sKind _sName}  {
    global asMapping

    regsub -all { } "${_sName}" {} sSymbName
    set sSymbName "${_sKind}_${sSymbName}"

    # get existing symbolic name (if exists)
    set sExists [mql list property \
                    on program $asMapping(Program.RegisterSymbolicNames) \
                    to ${_sKind} "${_sName}"]
    regsub -all { on program .*} "${sExists}" {} sExists

    if {"${sExists}" != "${sSymbName}"}  {
      # if old symbolic name is not equal new symbolic name => delete
      if {"${sExists}" != ""}  {
        puts "remove wrong registered property '${sExists}' for ${_sKind} '${_sName}'"
        mql delete property "${sExists}" \
            on program $asMapping(Program.RegisterSymbolicNames) \
            to ${_sKind} "${_sName}"
      }
      # and create new one
      puts "created registered property '${sSymbName}' for ${_sKind} '${_sName}'"
      mql add property "${sSymbName}" \
            on program $asMapping(Program.RegisterSymbolicNames) \
            to ${_sKind} "${_sName}"
    }
  }

  ##############################################################################
  # The procedure installs given JPO within the given root path.
  ##############################################################################
  proc pInstallJPO {_sRoot _sJPOName _sVersion}  {
    global asMapping

    regsub -all {\.} "${_sJPOName}" {/} sFileName
    set sFileName [file join "${_sRoot}" "${sFileName}_mxJPO.java"]
    set sFileDate [clock format [file mtime "${sFileName}"]  -gmt true -format "%Y-%m-%d %H:%M:%S"]
    if {[mql list prog "${_sJPOName}"] == ""}  {
      set sJPODate ""
    } else  {
      set sJPODate [mql print prog "${_sJPOName}" select property\[$asMapping(PropertyDef.FileDate.PropertyName)\].value dump]
    }
    if {"${sJPODate}" != "${sFileDate}"}  {
      puts "update jpo '${_sJPOName}'"
      mql insert prog "${sFileName}"
      mql mod prog ${_sJPOName} \
            add property $asMapping(PropertyDef.FileDate.PropertyName) value "${sFileDate}" \
            add property $asMapping(PropertyDef.Version.PropertyName) value "${_sVersion}"
    }
    pRegisterObject program "${_sJPOName}"
  }

  ##############################################################################
  # The procedure installs given property within the given root path.
  ##############################################################################
  proc pInstallProperties {_sRoot _sPropName _sVersion _sExtensionFile}  {
    global asMapping

    # extract path and file of property
    regsub {\.properties} "${_sPropName}" {} sFileName
    regsub -all {\.} "${sFileName}" {/} sFileName
    set sFileName [file join "${_sRoot}" "${sFileName}.properties"]

    # if a file extension exists, both file dates must be checked!
    set sFileDate [clock format [file mtime "${sFileName}"]  -gmt true -format "%Y-%m-%d %H:%M:%S"]
    if {"${_sExtensionFile}" != ""}  {
      set sFileDate "${sFileDate}, [clock format [file mtime "${_sExtensionFile}"]  -gmt true -format "%Y-%m-%d %H:%M:%S"]"
    }

    if {[mql list prog "${_sPropName}"] == ""}  {
      set sDate ""
      mql add prog "${_sPropName}"
    } else  {
      set sDate [mql print prog "${_sPropName}" select property\[$asMapping(PropertyDef.FileDate.PropertyName)\].value dump]
    }
    if {"${sDate}" != "${sFileDate}"}  {
      puts "update property '${_sPropName}'"

      # read original properties
      set pFile [open [file join "${sFileName}"] r]
      set sCode [read $pFile]
      close $pFile

      # read extension file
      if {"${_sExtensionFile}" != ""}  {
        set pFile [open [file join "${_sExtensionFile}"] r]
        set sCode "${sCode}\n[read $pFile]"
        close $pFile
      }

      # update property program (with escape on because of special characters)
      mql set escape on
      mql mod prog ${_sPropName} \
            code "${sCode}" \
            add property $asMapping(PropertyDef.FileDate.PropertyName) value "${sFileDate}" \
            add property $asMapping(PropertyDef.Version.PropertyName) value "${_sVersion}"
      mql set escape off
    }
    pRegisterObject program "${_sPropName}"
  }

  ##############################################################################
  # The procedure installs depending data model needed for the MxUpdate.
  ##############################################################################
  proc pInstallDM {_sRoot _sVersion}  {
    global asMapping

    # create / update trigger group type
    if {[mql list type $asMapping(TypeDef.TriggerGroup.BusType)] == ""}  {
      puts "create trigger group type '$asMapping(TypeDef.TriggerGroup.BusType)'"
      mql add type $asMapping(TypeDef.TriggerGroup.BusType) \
          property $asMapping(PropertyDef.InstalledDate.PropertyName) value [clock format [clock clicks]  -gmt true -format "%m-%d-%Y"]
    } else  {
      puts "update trigger group type '$asMapping(TypeDef.TriggerGroup.BusType)'"
    }
    mql mod type $asMapping(TypeDef.TriggerGroup.BusType) \
        description "Type used to group trigger definitions." \
        icon [file join "${_sRoot}" "icons" "datamodel" "TriggerGroup.gif"] \
        add property $asMapping(PropertyDef.Application.PropertyName)   value "MxUpdate" \
        add property $asMapping(PropertyDef.Author.PropertyName)        value "The MxUpdate Team" \
        add property $asMapping(PropertyDef.Installer.PropertyName)     value "The MxUpdate Team" \
        add property $asMapping(PropertyDef.OriginalName.PropertyName)  value "$asMapping(TypeDef.TriggerGroup.BusType)" \
        add property $asMapping(PropertyDef.Version.PropertyName)       value "${_sVersion}"
    pRegisterObject type "$asMapping(TypeDef.TriggerGroup.BusType)"

    # create / update trigger group policy
    if {[mql list policy $asMapping(TypeDef.TriggerGroup.BusPolicy)] == ""}  {
      puts "create trigger group policy '$asMapping(TypeDef.TriggerGroup.BusPolicy)'"
      mql copy policy $asMapping(TypeDef.Trigger.BusPolicy) $asMapping(TypeDef.TriggerGroup.BusPolicy) \
          remove state "Inactive" \
          remove type $asMapping(TypeDef.Trigger.BusType) \
          add property $asMapping(PropertyDef.InstalledDate.PropertyName) value [clock format [clock clicks]  -gmt true -format "%m-%d-%Y"]
    } else  {
      puts "update trigger group policy '$asMapping(TypeDef.TriggerGroup.BusPolicy)'"
    }
    mql mod policy $asMapping(TypeDef.TriggerGroup.BusPolicy) \
        description "Policy used to group trigger definitions." \
        add type $asMapping(TypeDef.TriggerGroup.BusType) \
        add property $asMapping(PropertyDef.Application.PropertyName)   value "MxUpdate" \
        add property $asMapping(PropertyDef.Author.PropertyName)        value "The MxUpdate Team" \
        add property $asMapping(PropertyDef.Installer.PropertyName)     value "The MxUpdate Team" \
        add property $asMapping(PropertyDef.OriginalName.PropertyName)  value "$asMapping(TypeDef.TriggerGroup.BusPolicy)" \
        add property $asMapping(PropertyDef.Version.PropertyName)       value "${_sVersion}"
    pRegisterObject policy "$asMapping(TypeDef.TriggerGroup.BusPolicy)"

    # create / update trigger group relationship
    if {[mql list relationship $asMapping(TypeDef.TriggerGroup.BusRelsBoth)] == ""}  {
      puts "create trigger group relationship '$asMapping(TypeDef.TriggerGroup.BusRelsBoth)'"
      mql add relationship $asMapping(TypeDef.TriggerGroup.BusRelsBoth)
    } else  {
      puts "update trigger group relationship '$asMapping(TypeDef.TriggerGroup.BusRelsBoth)'"
    }
    mql mod relationship $asMapping(TypeDef.TriggerGroup.BusRelsBoth) \
        description "Relationship used to group trigger definitions." \
        preventduplicates \
        from add type $asMapping(TypeDef.TriggerGroup.BusType) \
        to add type $asMapping(TypeDef.Trigger.BusType) \
           add type $asMapping(TypeDef.TriggerGroup.BusType) \
        add property $asMapping(PropertyDef.Application.PropertyName)   value "MxUpdate" \
        add property $asMapping(PropertyDef.Author.PropertyName)        value "The MxUpdate Team" \
        add property $asMapping(PropertyDef.Installer.PropertyName)     value "The MxUpdate Team" \
        add property $asMapping(PropertyDef.OriginalName.PropertyName)  value "$asMapping(TypeDef.TriggerGroup.BusRelsBoth)" \
        add property $asMapping(PropertyDef.Version.PropertyName)       value "${_sVersion}"
    pRegisterObject relationship "$asMapping(TypeDef.TriggerGroup.BusRelsBoth)"
  }
  

  mql verbose off
  mql set escape off

  pReadMapping "${sPath}"

  pInstallProperties "${sPath}" "org.mxupdate.mapping.properties" "${VERSION}" "${sMappingFile}"
  pInstallDM         "${sPath}"                                                "${VERSION}"
  pInstallJPO        "${sPath}" "org.mxupdate.install.Insert"     "${VERSION}"
  pInstallJPO        "${sPath}" "org.mxupdate.util.MqlUtil"       "${VERSION}"

  mql exec prog "org.mxupdate.install.Insert" "${sPath}" "${VERSION}"

  mql verbose on
  mql compile prog org.mxupdate.*,MxUpdate
  mql verbose off
  
  mql exec prog "org.mxupdate.install.InstallDataModel" "${sPath}" "${VERSION}"
}