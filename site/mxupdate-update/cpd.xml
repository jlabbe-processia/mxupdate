<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="34" tokens="117">
<file line="158" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/userinterface/Channel_mxJPO.java"/>
<file line="149" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/userinterface/Portal_mxJPO.java"/>
<codefragment>
<![CDATA[
            sub.put(channelRef.column, channelRef);
        }

        super.prepare(_paramCache);
    }

    /**
     * Writes specific information about the cached portal to the given writer
     * instance. This includes
     * <ul>
     * <li>{@link #label}</li>
     * <li>{@link #href}</li>
     * <li>{@link #alt}</li>
     * <li>settings defined as properties starting with &quot;%&quot; in
     *     {@link #getPropertiesMap()}</li>
     * <li>channel references {@link #orderedChannelRefs}</li>
     * </ul>
     *
     * @param _paramCache   parameter cache
     * @param _out          writer instance to the TCL update file
     * @throws IOException if the TCL update code could not be written
     */
    @Override()
    protected void writeObject(final ParameterCache_mxJPO _paramCache,
                               final Appendable _out)
        throws IOException
    {
        _out.append(" \\\n    label \"").append(StringUtil_mxJPO.convertTcl(this.label)).append("\"");
        if (this.href != null)  {
            _out.append(" \\\n    href \"").append(StringUtil_mxJPO.convertTcl(this.href)).append("\"");
        }
        if (this.alt != null)  {
            _out.append(" \\\n    alt \"").append(StringUtil_mxJPO.convertTcl(this.alt)).append("\"");
        }
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="108">
<file line="127" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/program/JPOProgram_mxJPO.java"/>
<file line="100" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/program/MQLProgram_mxJPO.java"/>
<codefragment>
<![CDATA[
    public MQLProgram_mxJPO(final TypeDef_mxJPO _typeDef,
                            final String _mxName)
    {
        super(_typeDef, _mxName);
    }

    /**
     * Searches for all programs which are not JPOs and returns this list.
     *
     * @param _paramCache   parameter cache
     * @return set of all program names (which are not JPOs)
     * @throws MatrixException if the &quot;<code>list program</code>&quot;
     *                         failed which is used to evaluate the JPO names
     */
    @Override()
    public Set<String> getMxNames(final ParameterCache_mxJPO _paramCache)
        throws MatrixException
    {
        final StringBuilder cmd = new StringBuilder()
                .append("list program * select name isjavaprogram dump \"\t\"");
        final Set<String> ret = new TreeSet<String>();
        for (final String name : MqlUtil_mxJPO.execMql(_paramCache, cmd).split("\n"))  {
            if (!"".equals(name))  {
                final String[] nameArr = name.split("\t");
                if (!"TRUE".equals(nameArr[1]))  {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="108">
<file line="808" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/Policy_mxJPO.java"/>
<file line="267" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/Rule_mxJPO.java"/>
<codefragment>
<![CDATA[
            .append('\"');
        if ((this.publicAccessFilter != null) && !"".equals(this.publicAccessFilter))  {
            _out.append(" filter \"")
                .append(StringUtil_mxJPO.convertTcl(this.publicAccessFilter))
                .append("\"");
        }
        // public revoke
        if ((!this.publicRevoke.isEmpty() && !((this.publicRevoke.size() == 1) && this.publicRevoke.contains("none")))
                || ((this.publicRevokeFilter != null) && !"".equals(this.publicRevokeFilter)))  {
            _out.append(" \\\n    add revoke public \"")
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="108">
<file line="787" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/Policy_mxJPO.java"/>
<file line="246" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/Rule_mxJPO.java"/>
<codefragment>
<![CDATA[
            .append('\"');
        if ((this.ownerAccessFilter != null) && !"".equals(this.ownerAccessFilter))  {
            _out.append(" filter \"")
                .append(StringUtil_mxJPO.convertTcl(this.ownerAccessFilter))
                .append("\"");
        }
        // owner revoke
        if ((!this.ownerRevoke.isEmpty() && !((this.ownerRevoke.size() == 1) && this.ownerRevoke.contains("none")))
                || ((this.ownerRevokeFilter != null) && !"".equals(this.ownerRevokeFilter)))  {
            _out.append(" \\\n    add revoke owner \"")
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="107">
<file line="122" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/user/Group_mxJPO.java"/>
<file line="190" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/user/Role_mxJPO.java"/>
<codefragment>
<![CDATA[
                .append(StringUtil_mxJPO.convertTcl(role))
                .append("\" child \"${NAME}\"");
        }
    }

    /**
     * The method overwrites the original method to append the MQL statements
     * in the <code>_preMQLCode</code> to reset this role. Following steps are
     * done:
     * <ul>
     * <li>reset description</li>
     * <li>remove all parent groups</li>
     * <li>define as &quot;normal&quot; role</li>
     * </ul>
     *
     * @param _paramCache       parameter cache
     * @param _preMQLCode       MQL statements which must be called before the
     *                          TCL code is executed
     * @param _postMQLCode      MQL statements which must be called after the
     *                          TCL code is executed
     * @param _preTCLCode       TCL code which is defined before the source
     *                          file is sourced
     * @param _tclVariables     map of all TCL variables where the key is the
     *                          name and the value is value of the TCL variable
     *                          (the value is automatically converted to TCL
     *                          syntax!)
     * @param _sourceFile       souce file with the TCL code to update
     * @throws Exception if the update from derived class failed
     */
    @Override()
    protected void update(final ParameterCache_mxJPO _paramCache,
                          final CharSequence _preMQLCode,
                          final CharSequence _postMQLCode,
                          final CharSequence _preTCLCode,
                          final Map<String,String> _tclVariables,
                          final File _sourceFile)
        throws Exception
    {
        // description and all parents
        final StringBuilder preMQLCode = new StringBuilder()
                .append("escape mod ").append(this.getTypeDef().getMxAdminName())
                .append(" \"").append(StringUtil_mxJPO.convertMql(this.getName())).append('\"')
                .append(" description \"\"")
                .append(" remove parent all");
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="105">
<file line="292" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/util/StringUtil_mxJPO.java"/>
<file line="417" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/util/StringUtil_mxJPO.java"/>
<codefragment>
<![CDATA[
    public static String joinMql(final char _separator,
                                 final boolean _quotes,
                                 final Collection<String> _list,
                                 final String _emptyString)
    {
        final StringBuilder ret = new StringBuilder();

        boolean first = true;
        if (_list.isEmpty())  {
            if (_emptyString != null)  {
                ret.append(_emptyString);
            }
        } else  {
            for (final String elem : _list)  {
                if (!first)  {
                    ret.append(_separator);
                } else  {
                    first = false;
                }
                if (_quotes)  {
                    ret.append('\"');
                }
                ret.append(StringUtil_mxJPO.convertMql(elem));
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="103">
<file line="364" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/AbstractAttribute_mxJPO.java"/>
<file line="162" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/userinterface/Form_mxJPO.java"/>
<codefragment>
<![CDATA[
                        .append(" \"").append(StringUtil_mxJPO.convertMql(this.getName())).append("\" web;");
        MqlUtil_mxJPO.execMql(_paramCache, cmd);
    }

    /**
     * The method overwrites the original method to append the MQL statements
     * in the <code>_preMQLCode</code> to reset this form. Following steps are
     * done:
     * <ul>
     * <li>remove all fields of the web form</li>
     * <li>set to not hidden</li>
     * </ul>
     * The update of web forms works sometimes not correctly for the correct
     * order of fields. Because of that, the TCL update code is includes a
     * {@link #ORDER_PROC procedure} to order the form fields.
     *
     * @param _paramCache       parameter cache
     * @param _preMQLCode       MQL statements which must be called before the
     *                          TCL code is executed
     * @param _postMQLCode      MQL statements which must be called after the
     *                          TCL code is executed
     * @param _preTCLCode       TCL code which is defined before the source
     *                          file is sourced
     * @param _tclVariables     map of all TCL variables where the key is the
     *                          name and the value is value of the TCL variable
     *                          (the value is automatically converted to TCL
     *                          syntax!)
     * @param _sourceFile       souce file with the TCL code to update
     * @throws Exception if the update from derived class failed
     * @see #ORDER_PROC
     */
    @Override()
    protected void update(final ParameterCache_mxJPO _paramCache,
                          final CharSequence _preMQLCode,
                          final CharSequence _postMQLCode,
                          final CharSequence _preTCLCode,
                          final Map<String,String> _tclVariables,
                          final File _sourceFile)
        throws Exception
    {
        // reset HRef, description, alt and label
        final StringBuilder preMQLCode = new StringBuilder()
                .append("escape mod ").append(this.getTypeDef().getMxAdminName())
                .append(" \"").append(StringUtil_mxJPO.convertMql(this.getName())).append('\"')
                .append(" !hidden");
]]>
</codefragment>
</duplication>
<duplication lines="71" tokens="102">
<file line="651" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/Policy_mxJPO.java"/>
<file line="71" path="/Users/tim/Daten/Bosch/mxupdate/src/main/java/org/mxupdate/update/datamodel/Rule_mxJPO.java"/>
<codefragment>
<![CDATA[
    private final Set<String> ownerAccess = new TreeSet<String>();

    /**
     * Filter for the owner access.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private String ownerAccessFilter;

    /**
     * Set holding the complete owner revoke.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private final Set<String> ownerRevoke = new TreeSet<String>();

    /**
     * Filter for the owner revoke.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private String ownerRevokeFilter;

    /**
     * Set holding the complete public access.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private final Set<String> publicAccess = new TreeSet<String>();

    /**
     * Filter for the public access.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private String publicAccessFilter;

    /**
     * Set holding the complete public revoke.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private final Set<String> publicRevoke = new TreeSet<String>();

    /**
     * Filter for the public revoke.
     *
     * @see #parse(String, String)
     * @see #writeObject(ParameterCache_mxJPO, Appendable)
     */
    private String publicRevokeFilter;

    /**
     * Stack used to hold the user access while parsing.
     *
     * @see #parse(String, String)
     */
    private final Stack<UserAccess> userAccess = new Stack<UserAccess>();

    /**
     * Sorted set of user access (by name of the user).
     *
     * @see #prepare(ParameterCache_mxJPO)
     */
    private final Set<UserAccess> userAccessSorted = new TreeSet<UserAccess>();
]]>
</codefragment>
</duplication>
</pmd-cpd>